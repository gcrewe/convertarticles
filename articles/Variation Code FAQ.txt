Variation Code FAQ
<p><strong>What's the difference between the 'code editor' and the 'custom javascript' editors? What does one do that the other does not?</strong></p>
<p><span style="font-weight: 400;">The “Code Editor” lets you edit the code generated by the editor when you do changes using the right-click contextual menu options. In there you can also write code but it has to follow the guidelines explained at:</span></p>
<p><a href="https://support.convert.com/hc/en-us/articles/205152825-Advanced-Writing-Custom-Variation-Code-using-Code-Editor-"><span style="font-weight: 400;">https://convert.zendesk.com/hc/en-us/articles/205152825-Advanced-Writing-Custom-Variation-Code-using-Code-Editor-</span></a></p>
<p><span style="font-weight: 400;">That code is executed multiple times until each line returned at least one DOM element or DOM ready is hit.</span></p>
<p><span style="font-weight: 400;">On the other hand, inside Custom JS you can add any standard JS code. That will run once, at the moment when the experiment is fired, which is usually somewhere in the head section of the page</span></p>
<p><strong>Do you have examples that use the custom JS editor?</strong></p>
<p><span style="font-weight: 400;">Any JS could go into there… But, if the code manipulates DOM elements, it has to be wrapped in a Dom ready call:</span><span style="font-weight: 400;"><br></span></p>
<pre><code class="language-markup">
convert.$(document).ready(function() {
   //code here
});
</code></pre>
<p><strong>Does Custom JS have anything special from what standard JS developers write?</strong></p>
<p><span style="font-weight: 400;">No there aren't any. Only that this code is written in English (UTF-8) and included on the page when the variation is shown.</span></p>
<p><span style="font-weight: 400;">But will I see any differences if I run my code via one or the other? I always wrap my code in convert.$( document.... ) etc - also when using the code editor</span></p>
<p><span style="font-weight: 400;">In that case, you will not see any difference...and you need to place the code inside the Custom JS area for best performance. But, in some cases, you might see some differences. For instance, if you have this line that changes an element</span></p>
<pre><code class="language-markup">
$("selector").text("new text");
</code></pre>
<p><span style="font-weight: 400;">if you write it in Code editor, will be:</span></p>
<pre><code class="language-markup">
convert._$("selector").text("new text")
</code></pre>
<p><span style="font-weight: 400;">and inside Custom JS would be </span></p>
<pre><code class="language-markup">
convert.$(document).ready(function() {
   convert.$("selector").text("new text")
});
</code></pre>
<p><span style="font-weight: 400;">In the first case, when the experiment is presented, you will not see the text found initially in that block before the change is applied</span></p>
<p><span style="font-weight: 400;">In the second case, it's possible that for a short time you see the original text before it's changed by the code. </span> </p>
<p><span style="font-weight: 400;">But inside Code editor, all code should be of the form in the first case: </span></p>
<pre><code class="language-markup">
convert._$("selector").action
</code></pre>
<p><strong>Can i pass convert.$ as an argument like in the following?</strong></p>
<pre><code class="language-markup">
convert.$(document).ready(function() {

   //code here

});
</code></pre>
<p><span style="font-weight: 400;">does that make any difference?</span></p>
<p><span style="font-weight: 400;">Yes, sure you can. However, it does make a difference. In the first case, you use convert bundled jquery</span></p>
<p><strong>When using the convert version of jQuery, do I need document ready?</strong></p>
<p><span style="font-weight: 400;">Yes, you need DOM ready.</span></p>
<p><strong>In both cases?</strong></p>
<p><span style="font-weight: 400;">Yes.. in both cases. In the second case, you need to make sure that the jQuery is loaded on the page before Convert…</span></p>
<p><span style="font-weight: 400;">Usually, people use the on-page version when they have certain plugins attached to that like for instance a lightbox.</span></p>
<p><strong>Why do I need a DOM-ready wrapper when my code is executed every 50 ms until there's nothing left inside the code that seems to need processing? It seems to be running before DOM ready.</strong></p>
<p><span style="font-weight: 400;">That is the case only with code placed inside Code Editor, but code inside Code Editor has to use convert._$ and only that.</span></p>
<p><strong>Why not use one code editor for all cases?</strong></p>
<p><span style="font-weight: 400;">Mainly, the code inside the code editor is executed multiple times, until all convert._$ code lines inside will return at least one element. But if there's no convert._$ inside, then it will execute just once…</span></p>
<p><strong>What if want to run some code only once inside the Code Editor?</strong></p>
<p><span style="font-weight: 400;">You can do the following:</span></p>
<pre><code class="language-markup">
if(convert._$('selector').length&gt;0) {
   convert.$(selector1).action
}
</code></pre>
<p><span style="font-weight: 400;">And in this case, it will poll until the selector is found and then will look for selector1, </span><span style="font-weight: 400;">but if that is not found it won't loop to look for it.</span></p>
<p><span style="font-weight: 400;">You can also do IF statements for nodes deep in the DOM that, when loaded, will ensure other nodes before they were already loaded and can be safely used in code.</span></p>
<p><strong>Why do you use two libraries to achieve the same goal?</strong></p>
<p><span style="font-weight: 400;">Because you cannot use:</span></p>
<pre><code class="language-markup">
if(convert._$('selector').length&gt;0) {
   convert._$(selector1).action
};
</code></pre>
<p><span style="font-weight: 400;">Since, if when the <em>selector</em> is found, <em>selector1</em> will not be found. The code will loop but the second-time <em>selector</em> would not be found anymore as the code considers it already handled.</span></p>
<p><strong>So, convert._$( document ).ready() is not really a document ready as I know it?</strong></p>
<p><span style="font-weight: 400;">It is a modified jQuery, but in this statement will have the same effect.</span></p>
<pre><code class="language-markup">
convert.$(document).ready(function() {
(function($){
// do the magic
   })(convert.$)
});
</code></pre>
<p><span style="font-weight: 400;">Or this if you do not want to rely on the jQuery loaded on the page.</span></p>
<p><strong>So convert._$ designed to execute the code without DOM ready?</strong><span style="font-weight: 400;"><br></span><span style="font-weight: 400;">Yes, convert._$ is designed to work without DOM ready,</span></p>
<p><span style="font-weight: 400;">But only on simple instructions like:</span></p>
<pre><code class="language-markup">
convert._$(selector).action
</code></pre>