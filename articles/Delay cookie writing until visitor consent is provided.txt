Delay cookie writing until visitor consent is provided
<h2>Overview</h2>
<p>Due to upcoming ITP requirements, some customers have asked us, if it is possible to delay the writing of convert cookies until consent is provided by the customer. This without having flashing or blinking, behind the consent modal. </p>
<h2>Solution for blocking all Cookies</h2>
<p>The following script needs to be added to your <a href="https://support.convert.com/hc/en-us/articles/115000006251-Project-Experience-Experiment-or-Personalization-Variation-Javascript#global-project-javascript" target="_blank" rel="noopener">Project Global Javascript</a> section.</p>
<p>Please adapt the script in the last section to enable the cookie writing after your consent javascript event such as the flag variable that will define if the cookies should be written. the disable_cookies variable should be set to false for the script blocking to be enabled. </p>
<pre><code lang="javascript"><br>if (document.cookie.indexOf('_conv_') == -1 ) {<br><br><br>if(typeof disable_cookies === 'undefined') {<br> disable_cookies = true;<br>}<br> <br>// Store the set and get original functions <br>var cookie_setter_orig = document.__lookupSetter__("cookie").bind(document);<br>var cookie_getter_orig = document.__lookupGetter__("cookie").bind(document);<br><br>// Redefine the function to only enable cookies when the switch disable_cookies is true.<br>convert.defineProperty(document, "cookie", {<br> get: function () {<br> return cookie_getter_orig();<br> },<br> set: function (val) {<br> // When disable cookies is false then the writing is enabled<br> if (!disable_cookies) {<br> console.log('Cookies restablished')<br> cookie_setter_orig(val);<br> }<br> },<br> configurable: true<br>});<br><br>// Change the click event to any event that you want to enable the cookie writing<br>convert.$( "#button" ).click(function() {<br> console.log('Resetting Cookies');<br><br>disable_cookies = false;<br> <br> // Reload Convert Load Sequence (polling)<br> // So the convert cookies can be written<br><br>_conv_q = _conv_q || []; <br> _conv_q.push(["run","true"]);<br> <br>});<br>};</code></pre>
<h3>Caveats:</h3>
<ol>
<li>The script will not write cookies, before the consent event happens, however it will still send the experiment visitors and conversions to the Convert servers. </li>
<li>If the visitor does not consent, then there will not be cookies written, and if there is an experiment behind the modal a chosen variation will be shown to the visitor. However, if he comes back Convert might show a different variation than the original as there were no cookies written to remember this.</li>
</ol>
<h2>Solution for blocking only Convert Cookies:</h2>
<pre>console.log('Running Convert Cookie Disabling Code');<br>if (document.cookie.indexOf('_conv_') == -1 ) {<br><br><br>if(typeof disable_cookies === 'undefined') {<br>disable_cookies = true;<br>}<br><br>// Store the set and get original functions<br>var cookie_setter_orig = document.__lookupSetter__("cookie").bind(document);<br>var cookie_getter_orig = document.__lookupGetter__("cookie").bind(document);<br><br>// Redefine the function to only enable cookies when the switch disable_cookies is true.<br>Object.defineProperty(document, "cookie", {<br>get: function () {<br>return cookie_getter_orig();<br>},<br>set: function (val) {<br>// When disable cookies is false then the writing is enabled or when its not a Convert cookie<br>if (!disable_cookies || !val.includes('_conv')) {<br>cookie_setter_orig(val);<br>}<br>else {<br>console.log('Convert Cookie Blocked');<br>}<br>},<br>configurable: true<br>});<br><br>// Following example code is to disable the cookie blocking<br><br>convert.$( document ).ready(function() {<br><br>convert.$( "#button" ).click(function() {<br><br>console.log('Resetting Cookies');<br>disable_cookies = false;<br><br>// Reload Convert Load Sequence (polling)<br>// So the convert cookies can be written<br><br>window._conv_q = _conv_q || [];<br>_conv_q.push(["run","true"]);<br><br>});<br>})</pre>